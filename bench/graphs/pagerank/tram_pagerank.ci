mainmodule tram_pagerank {
	extern module GraphGenerator;

	readonly CmiUInt8 N;
	readonly double D;
  readonly CProxy_TestDriver               driverProxy;
  // Handle to the communication library (group)
  readonly CProxy_ArrayMeshStreamer<dtype, int, PageRankVertex,
                                    SimpleMeshRouter> aggregator;

  mainchare TestDriver {
    entry TestDriver (CkArgMsg *args);
		entry void startGraphConstruction();
    entry [threaded] void doPageRank();
    entry [reductiontarget] void done();
		entry void exit();
		entry void foo();
  };

	class PageRankEdge; 
  array [1D] PageRankVertex {
    entry PageRankVertex();
		entry void connectVertex(const PageRankEdge & edge);
		entry void doPageRankStep_init();
		entry [threaded] void doPageRankStep_update();
		entry void process(const dtype & m); 
		entry void verify();
		entry void print();
  };

	// Setup required for the graph generation library
  message MeshStreamerMessage<ArrayDataItem<PageRankEdge, int> >;
  group ArrayMeshStreamer<PageRankEdge, int, PageRankVertex, SimpleMeshRouter>;
  group MeshStreamer<ArrayDataItem<PageRankEdge, int>, SimpleMeshRouter>;

	//FIXME:charmxi bug
	group GraphLib__Generator_Tram<PageRankGraph, Options,		
		GraphLib::GraphType::Directed,
		GraphLib::GraphGeneratorType::Kronecker,
		CProxy_ArrayMeshStreamer<PageRankEdge, int, PageRankVertex, SimpleMeshRouter> >;

	//FIXME:charmxi bug
	group GraphLib__Generator_Charm<PageRankGraph, Options,		
		GraphLib::GraphType::Directed,
		GraphLib::GraphGeneratorType::Kronecker>;

  // Setup required for the communication library
  message MeshStreamerMessage<ArrayDataItem<dtype, int> >;
  group ArrayMeshStreamer<dtype, int, PageRankVertex, SimpleMeshRouter>;
  group MeshStreamer<ArrayDataItem<dtype, int>, SimpleMeshRouter>;
};
