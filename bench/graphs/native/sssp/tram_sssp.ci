mainmodule tram_sssp {
	extern module GraphGenerator;

  // Handle to the test driver (chare)
  readonly CProxy_TestDriver               driverProxy;
  // Handle to the communication library (group)
  readonly CProxy_ArrayMeshStreamer<dtype, long long, SSSPVertex,
                                    SimpleMeshRouter> aggregator;

  mainchare TestDriver {
    entry TestDriver (CkArgMsg *args);
    entry void start();
    entry void restart();
		entry void startVerificationPhase();
    entry [reductiontarget] void done(CmiUInt8 globalNumScannedEdges);
		entry void startGraphConstruction();
		entry void exit();
		entry void foo();
  };

	class SSSPEdge; 
  array [1D] SSSPVertex {
    entry SSSPVertex();
		entry void connectVertex(const SSSPEdge & edge);
		entry void make_root();
		entry [threaded] void process(const dtype & m); 
		entry [threaded] void update(const dtype & m); 
		entry void getScannedVertexNum();
		entry void verify();
		entry void check(const double & w);
		entry void print();
  };

  // Setup required for the communication library
  message MeshStreamerMessage<ArrayDataItem<dtype, long long> >;
  group ArrayMeshStreamer<dtype, long long, SSSPVertex, SimpleMeshRouter>;
  group MeshStreamer<ArrayDataItem<dtype, long long>, SimpleMeshRouter>;

	// Setup required for the graph generation library
  message MeshStreamerMessage<ArrayDataItem<SSSPEdge, long long> >;
  group ArrayMeshStreamer<SSSPEdge, long long, SSSPVertex, SimpleMeshRouter>;
  group MeshStreamer<ArrayDataItem<SSSPEdge, long long>, SimpleMeshRouter>;

	//FIXME:charmxi bug
	group GraphLib__Generator_Tram<SSSPGraph, Options,		
		GraphLib::VertexMapping::SingleVertex,
		GraphLib::GraphType::Directed,
		GraphLib::GraphGeneratorType::Kronecker,
		CProxy_ArrayMeshStreamer<SSSPEdge, long long, SSSPVertex, SimpleMeshRouter> >;

	//FIXME:charmxi bug
	group GraphLib__Generator_Charm<SSSPGraph, Options,		
		GraphLib::VertexMapping::SingleVertex,
		GraphLib::GraphType::Directed,
		GraphLib::GraphGeneratorType::Kronecker>;
};
