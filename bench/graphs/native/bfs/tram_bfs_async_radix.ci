mainmodule tram_bfs_async_radix {
	extern module GraphGenerator;
	extern module NDMeshStreamer;

  // Mean arrity of the graph 
  readonly int                             K;
  // Graph size (number of vertices and number of edges)
  readonly CmiUInt8                         N;
	readonly CmiUInt8 												M;
  // Handle to the test driver (chare)
  readonly CProxy_TestDriver               driverProxy;
  // Handle to the communication library (group)
  readonly CProxy_ArrayMeshStreamer<dtype, long long, BFSVertex,
                                    SimpleMeshRouter> aggregator;

  mainchare TestDriver {
    entry TestDriver (CkArgMsg *args);
    entry [reductiontarget] void start();
		entry [reductiontarget] void startGraphConstruction();
    entry [reductiontarget] void done(CmiUInt8 globalNumScannedEdges);
		entry [reductiontarget] void resume();
    entry [reductiontarget] void exit();
		entry void grayVertexExist();
  };

	class BFSEdge;
  array [1D] BFSVertex {
    entry BFSVertex();
		entry void connectVertex(const BFSEdge & edge);
		entry void make_root();
		//entry [reentrant] void update(int r); 
		entry void resume();
		entry void getScannedEdgesNum();
  };

  // Setup required for the communication library
  message MeshStreamerMessage<ArrayDataItem<dtype, long long> >;
  group ArrayMeshStreamer<dtype, long long, BFSVertex, SimpleMeshRouter>;
  group MeshStreamer<ArrayDataItem<dtype, long long>, SimpleMeshRouter>;

	// Setup required for the graph generation library
  message MeshStreamerMessage<ArrayDataItem<BFSEdge, long long> >;
  group ArrayMeshStreamer<BFSEdge, long long, BFSVertex, SimpleMeshRouter>;
  group MeshStreamer<ArrayDataItem<BFSEdge, long long>, SimpleMeshRouter>;

	//FIXME:charmxi bug
	group GraphLib__Generator_Tram<BFSGraph, Options,		
		GraphLib::GraphType::Directed,
		GraphLib::GraphGeneratorType::Kronecker,
		CProxy_ArrayMeshStreamer<BFSEdge, long long, BFSVertex, SimpleMeshRouter> >;

	//FIXME:charmxi bug
	group GraphLib__Generator_Charm<BFSGraph, Options,		
		GraphLib::GraphType::Directed,
		GraphLib::GraphGeneratorType::Kronecker>;
};
